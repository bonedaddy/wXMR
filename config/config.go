package config

import (
	"strings"

	"github.com/bonedaddy/wxmr/db"
	"github.com/bonedaddy/wxmr/rpc"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/ethclient"
	"go.bobheadxi.dev/zapx/zapx"
	"go.uber.org/zap"
)

// Config object wrapper
type Config struct {
	Service  `yaml:"server"`
	Monero   `yaml:"monero"`
	Ethereum `yaml:"ethereum"`
	Database `yaml:"database"`
	Logger   `yaml:"logger"`
}

// Logger configures the zap logger
type Logger struct {
	DevMode   bool   `yaml:"dev_mode"`
	DebugMode bool   `yaml:"debug_mode"`
	FilePath  string `yaml:"file_path"`
}

// Service provides configuration over the api server
type Service struct {
	ListenAddr string `yaml:"listen_addr"`
}

// Monero configures our connection to the monero blockchain
type Monero struct {
	RPCAddr    string `yamnl:"rpc_addr"`
	WalletName string `yaml:"wallet_name"`
}

// Ethereum configures our connection to the ethereum blockchain
type Ethereum struct {
	RPCAddr string `yaml:"rpc_addr"`
	// as generated by geth account new
	KeyData                string `yaml:"key_data"`
	KeyPassword            string `yaml:"key_password"`
	ReserveContractAddress string `yaml:"reserve_contract_address"`
}

// Database configures a connection to our database
// only supports sqlite3 for now
type Database struct {
	Path string `yaml:"path"`
}

// DefaultConfig returns an example default configuration suitable for use with the test environment
func DefaultConfig() *Config {
	return &Config{
		Service: Service{
			ListenAddr: "127.0.0.1:6666",
		},
		Monero: Monero{
			RPCAddr:    "http://127.0.0.1:6061/json_rpc",
			WalletName: "monerot-estnet",
		},
		Ethereum: Ethereum{
			RPCAddr: "http://127.0.0.1:8545",
			KeyData: `{"address":"f2ea9ce3a27862650a8d40d98329dc0bd403a0c3","crypto":{"cipher":"aes-128-ctr","ciphertext":"75b1c0181fee4c7fa634a49bac74dacb12dcc27ec157e8549b6374924c5b1272","cipherparams":{"iv":"87117ca98fd0652db342a549889be7fe"},"kdf":"scrypt","kdfparams":{"dklen":32,"n":262144,"p":1,"r":8,"salt":"032f744f960f549b4fc6d64177622fa1d34b16e8a4a106812d5ddc37487cb435"},"mac":"f468643296c390300e4ff808b9db4831275565c813c77cc64283adaaa1bcdffd"},"id":"c74bc71b-28a0-42cd-9474-4ffc98276d84","version":3}`,
		},
		Database: Database{
			Path: "test.db",
		},
		Logger: Logger{
			DevMode:   true,
			DebugMode: true,
			FilePath:  "wxmr.log",
		},
	}
}

// EthAuth returns a transactopts suitable for signing transactions
func (c *Config) EthAuth() (*bind.TransactOpts, error) {
	return bind.NewTransactor(strings.NewReader(c.Ethereum.KeyData), c.Ethereum.KeyPassword)
}

// EthRPC returns an ethereum RPC client
func (c *Config) EthRPC() (*ethclient.Client, error) {
	return ethclient.Dial(c.Ethereum.RPCAddr)
}

// XmrRPC returns a monero RPC client
func (c *Config) XmrRPC() (*rpc.Client, error) {
	return rpc.NewClient(c.Monero.RPCAddr)
}

// DB returns a database client
func (c *Config) DB() (*db.Database, error) {
	return db.New(c.Database.Path)
}

// ZapLogger returns a zap logger
func (c *Config) ZapLogger() (*zap.Logger, error) {
	return zapx.New(
		c.Logger.FilePath,
		c.Logger.DevMode,
		zapx.WithDebug(c.Logger.DebugMode),
	)
}
